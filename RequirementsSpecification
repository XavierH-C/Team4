Title page

//Page Break

Table of contents
1. Introduction
	1.1 Purpose
	1.2 Scope
	1.3 Definitions, acronyms, and abbreviations
	1.4 References
	1.5 Overview
2. Overall description
	2.1 Product perspective
	2.2 Product functions
	2.3 User characteristics
	2.4 Constraints
	2.5 Assumptions and dependencies
3. Specific requirements (See the attached UML use case specification)

//Page Break

1. Introduction
	1.1 Purpose:
	
	1.2 Scope:
	
	1.3 Definitions, acronyms, and abbreviations:
	
	1.4 References:
	
	1.5 Overview:
	
//Page Break

2. Overall description:

	2.1. Product perspective:
*USE CASE DIAGRAM*

	2.2. Product functions:
		1. login --> Arif 
		2. viewCourseContent --> Arif
		3. addCourseContent --> Arif 
		4. viewAssignmentQuestions
		5. submitCourseWork
		6. postCourseWorkRequirements
		7. viewGrades
		8. postGrade -> Sam
		9. takeQuiz -> Sam
		10. postQuiz -> Sam
		11. updateChecklist
		12. setChecklist
		13. viewGroups
		14. createGroups
		15. sendCourseEmail
		16. updateProfile -> Sam
		17. createCourse
		18. CreateUserAccounts
		19. AddStudentCourseRegistration
		20. viewClasslist
		21. AddCourseOfferingInfo
		22. createProfile -> Sam

1. login
Actors: Student, Professor, TA or Administrator
Description: Before accessing their profile’s information and functions, a user must prove their identity of the account by login in with their name and password. This use case is a precondition to access all further use cases.
Precondition: None
Actor-System Interaction:
	System: Display login forms
	Actor: Fill in login forms 
	Case1: Actor Successfully logged in	
		System: Display success message
		Postcondition: Actor logged in to their account
	Case2: Actor did not Successfullylog in
		System: Display error message and prompt user to try again
		Postcondition: Show login page again

2. viewCourseContent
Actors: Student, Ta, Professor, Administrator
Description: Display the contents of a particular course, for example: Assignments, Outline, Labs, Timeline, etc. Each of these contents shall be linked to a page that goes into detail about them. This shall be the central hub for any details related to the Course.
Precondition: Actors must be logged in and select the particular course they want to view
Actor-System Interaction: 
	System: Display list of contents associated with the Course
	Actor: Select any of the items in the list
	System: Display the page that was linked with the chosen choice of Actor
Postcondition: Display the page that is linked with the choice of the Actor

3. addCourseContent
Actors: Professor and TA
Description: This use case will allow for a professor to create a course and add students, TAs and initial content.
Precondition: Successful login
Actor-System Interaction:
	System: Display options for actor to choose to add (document, link, news,etc)
	Actor: Select the type of content to add 
	System: Display the drag and drop option for user to add the content or the form where the can add the associated link.
	Actor: Fill in the required forms or drop the content in the right precondition
	System: Display add content button
	Actor: Select add content
	Case1 : content was Successfully added
		System: Display Successful message
		Postcondition: Add the course content to the list of contents of the course
	Case2 : content was not Successfully added
		System: Display error message and prompt user to try again
		Postcondition: None

4. viewAssignmentQuestions
Actors: Student
Description: Display a list of assignments organized by time posted. One assignment can be selected to view in-depth information (requirements, due date, etc.). Will also be used to submit assignments for the student actors.
Precondition: Successful login
Actor-System Interaction: 
	System: Display a list of available assignments.
	Actor: Select one assignment to view in depth.
	System: Display link to both assignment document and submission folder.
	Case 1: Actor: Assignment document selected
		System: Display assignment document
	Case 2: Actor: Submission folder selected
		System: Redirect to assignment submission folder
Postcondition: None

5. submitCourseWork
Actor: Student
Description: After professor has posted course work requirements, a student may add one of their files and submit them for marking.
Precondition: Professor's postCourseWorkRequirements has been completed
Actor-System Interaction: 
	System: Display a list of course work available for submission, as well as if it has already been submitted
	Actor: Select one piece of work to submit
	System: Display info for the course work
	Actor: Selects one or more files to submit for grading
	System: Allows "Submit" button to be selected
	Case 1: Actor: Selects submit
		System: Submits work to professor
	Postcondition: Course work is submitted and may be marked
	Case 2: Actor: Selects cancel
		System: Returns user to course home screen
	Postcondition: None

6. postCourseWorkRequirements
Actor: Professor
Description: Allows professor to post requirements for course work, as well as allowing said course work to be submitted.
Precondition: None
Actor-System Interaction:
	System: Display text box for teacher to write requirements or allow for selection of a PDF to be uploaded instead
	Actor: Writes requirements/selects PDF to upload
	System: Makes document viewable to students and opens a submission folder of the same name given to course work
Postcondition: submitCourseWork is now available to students for this piece of work

7. viewGrades
Actors: Student
Description: Display a list of grades, grouped by type (assignment, quiz) and date. One grade can be selected for marker's comments, if applicable.
Actor-System Interaction:
	System: Display a list of all available grades.
	Actor: Selects a grade to view in depth.
	System: Display grade and marker's comments, marker's comments box empty if none were added.
Postcondition: None

8. postGrade
Actors: Professor and TA
Description: After a particular piece of course work has been submitted and graded, the TA or Professor actor can choose to post the student’s grade.

9. takeQuiz
Actors: Student
Description: After a quiz has been added to a course’s content by the professor, the student can navigate to this page and opt to take the quiz. After the student completes the quiz, they choose to finalize and submit their answers.
Preconditon:
Actor-System Interaction:

Postconditon:

10. postQuiz
Actors: Professor
Description:
Precondition:
Actor-System Interaction:

Postcondition:

11. updateChecklist
Actors: Student
Description: Allows actor to create, mark complete or remove items from their own checklist.
Precondition: Login success
Actor-System Interaction:
	System: display current checklist
	Case 1: add to list
		Actor: Select add option
		System: display information form
		Actor: complete information form
		System: update checklist
	Case 2: remove from list
		Actor: select remove option
		System: display checklist editor
		Actor: choose item to remove from list
		System: update checklist
Postcondition: none

12. setChecklist
Actor: Professor

13. viewGroups
Actors: Student or TA
Description: Allows actor to view in class groups created by the professor.
Precondition: Login Success
Actor-System Interaction:
	Case 1: No groups
		System: display 'no groups' message.
	Case 2: Groups
		System: display classlist with group number beside each student.
Postcondition: none

14. createGroups
Actors: Professor
Description: Allows professor actor to sort students from a particular class into groups.
Precondition: Successful login to Prof account
Actor-System Interaction:
	System: Display create group form
	Actor: Complete create group form
	System: Assign student objects specified group number
Postcondition: none

15. sendCourseEmail
Actors: Student, Professor, TA or Administrator
Description: The actor will have the option to send and view emails from and to the class.  The initial screen will have all emails received from the class. Emails can be composed by selecting a button that will create a new window containing a text editor. After the email is written, the address which the email is to be sent to can be entered in a separate text field.

16. updateProfile
Actors: Student, Professor or TA
Description: Should someone wish to change the information listed on their profile ( photo, address, etc.), they can opt to do so by navigating to the “Update Profile” page.
Precondition: Login use-case was succesful

Postcondition: 

17. createCourse
Actors: Administrators
Description: An administrator has the option to create a course and assign a professor to it.

18. CreateUserAccounts
Actor: Administrator

19. AddStudentCourseRegistration
Actor: Administrator

20. viewClasslist
Actors: Student, Professor or TA
Description: The actor will have the option to display the class list. This use case will display a new page which contains every person who is either a professor, TA or student in the class.  This list can be sorted alphabetically and by position. A link to email any person in the class can be brought up through this screen.

21. AddCourseOfferingInfo
Actor: Administrator
Description: Allows administrator to add info such as prerequisites, times available, etc. to be selected and entered into by students
Precondition: None
Actor-System Interaction:
	System: Displays text box for admin to write a short course description, timing, avaiable spots, and prerequisites.
	Actor: Enters course info
	System: Creates a running tally of students currently in class. Posts course info for students to view
Postcondition: Course is available to be viewed and entered into by students. Running tally is updated when student enters

22. createProfile
Actor: Administrator
Description:
Precondition: Login use-case was successful
Actor-System Interaction:

Postcondition:

//Page Break

	2.3. Constraints:
*Constraints on project (time, tools, people, capital...)*

	2.4. Assumptions and dependencies:
*Hardwares, libraries and tools used*

	2.5. Apportioning of requirements:
*say requirements that may be delayed until future release*

//Page Break

3. Specific requirements (See the attached UML use case specification)
